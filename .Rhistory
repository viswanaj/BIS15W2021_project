theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 15)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 20)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "800px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 20)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "500px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 20)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 6,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 20)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 5,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 20)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 20)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = NULL, width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 20)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x="Acedemic Year",y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("Campus", " Select Campus:",
choices=unique(UC_admit$Campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("Ethnicity", "Category","Campus"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = NULL, width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!= "All") %>%
ggplot(aes_string(x = "Academic_Yr", y="FilteredCountFR",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 20)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x="Academic Year",y="Enrollment")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity Across the UC System"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Admission details", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity != "All") %>%
ggplot(aes_string(x = input$x,y="FilteredCountFR",fill="Ethnicity"))+
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Individuals")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
install.packages("qtl")
install.packages("qtlcharts")
library(qtl)
library(qtlcharts)
knitr::opts_chunk$set(fig.width=8, fig.height=6, message=FALSE)
?read.cross
knitr::opts_chunk$set(echo = TRUE)
nourishment_complete %>%
ggplot(aes(Recovered, Deaths, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(janitor)
food_data<-read.csv("food and covid data/Food_Supply_Quantity_kg_Data_general_notation.csv")
food_data
food_data %>%
group_by(Country) %>%
ggplot(aes(Obesity,Deaths))+geom_point()+geom_smooth(method = lm)
food_data %>%
group_by(Country) %>%
ggplot(aes(Vegetal.Products,Deaths))+geom_point()+geom_smooth(method = lm)
food_data %>%
select(Alcoholic.Beverages, Country) %>%
arrange(desc(Alcoholic.Beverages))
food_data %>%
group_by(Country) %>%
ggplot(aes(Obesity,Deaths))+geom_point()+geom_smooth()
food_data %>%
select(Obesity,Country) %>%
arrange(desc(Obesity)) %>%
mutate(island=)
island_food_data<- food_data %>%
filter(Country== "Samoa"| Country=="United Kingdom"| Country=="Fiji" | Country=="Japan"| Country=="Australia"| Country=="New Zealand"| Country=="Kiribati"| Country=="Iceland"| Country=="Philippines") %>%
mutate(island= TRUE)
island_food_data
non_island_food_data<- food_data %>%
filter( Country!="Australia", Country!="Samoa", Country!="United Kingdom", Country!="New Zealand", Country!="Kiribati", Country!="Iceland", Country!="Philippines", Country!="Fiji", Country!="Japan" ) %>%
mutate(island= FALSE)
non_island_food_data
food_data %>%
filter(Obesity>37) %>%
select(Country, Confirmed, Deaths, Recovered)
island_food_complete <- rbind(non_island_food_data, island_food_data)
island_food_complete
island_food_complete %>%
select(Country, Undernourished) %>%
arrange(desc(Undernourished))
island_food_complete %>%
filter(Country!= "United Kingdom") %>%
ggplot(aes(Obesity,Deaths,color=island))+geom_point()+geom_smooth(method = lm)
island_food_complete %>%
ggplot(aes(Obesity,Deaths,color=island))+geom_point()+geom_smooth(method = lm)
well_nourished_countries<-food_data %>%
filter(Undernourished== "<2.5") %>%
cbind(2.5) %>%
mutate(Undernourished_numeric= mean(2.5)) %>%
select(!"2.5")
food_experiment<- food_data %>%
filter(Undernourished != "<2.5")
food_experiment<-food_experiment %>%
mutate(Undernourished_numeric=as.numeric(as.character(food_experiment$Undernourished)))
nourishment_complete <- rbind(food_experiment, well_nourished_countries)
nourishment_complete
is.numeric(nourishment_complete$Undernourished_numeric)
nourishment_complete <- nourishment_complete %>%
mutate(nourishment_catagory= case_when(Undernourished_numeric <=2.5 ~ "low",
Undernourished_numeric > 2.5 & Undernourished_numeric <= 15 ~ "medium",
Undernourished_numeric > 15 ~ "high"))
nourishment_complete
nourishment_complete %>%
ggplot(aes(Recovered, Deaths, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(Deaths, Recovered, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete <- nourishment_complete %>%
mutate(nourishment_catagory= case_when(Undernourished_numeric <=2.5 ~ "low undernourishment",
Undernourished_numeric > 2.5 & Undernourished_numeric <= 15 ~ "medium undernourishment",
Undernourished_numeric > 15 ~ "high undernourishment"))
nourishment_complete
nourishment_complete %>%
ggplot(aes(Deaths, Recovered, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(Population, Deaths, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(Population, Confirmed, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(Confirmed, Population, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(Population, Undernourished_numeric, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(log10(Population), Undernourished_numeric, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete <- nourishment_complete %>%
mutate(nourishment_catagory= case_when(Undernourished_numeric <=2.5 ~ "low undernourishment",
Undernourished_numeric > 2.5 & Undernourished_numeric <= 10 ~ "medium undernourishment",
Undernourished_numeric > 10 ~ "high undernourishment"))
nourishment_complete
nourishment_complete %>%
ggplot(aes(Deaths, Recovered, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete <- nourishment_complete %>%
mutate(nourishment_catagory= case_when(Undernourished_numeric <=2.5 ~ "low undernourishment",
Undernourished_numeric > 2.5 & Undernourished_numeric <= 15 ~ "medium undernourishment",
Undernourished_numeric > 15 ~ "high undernourishment"))
nourishment_complete
nourishment_complete %>%
ggplot(aes(Deaths, Recovered, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(Obesity, Undernourished_numeric, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(Obesity, Undernourished_numeric, color= nourishment_catagory))+geom_point()
nourishment_complete %>%
group_by(nourishment_catagory) %>%
summarise(obesity_avg= mean(Obesity))
nourishment_complete %>%
group_by(nourishment_catagory) %>%
summarise(obesity_avg= mean(Obesity, na.rm=T))
nourishment_complete %>%
group_by(nourishment_catagory) %>%
summarise(obesity_avg= mean(Obesity, na.rm=T)) %>%
arrange(desc(obesity_avg))
nourishment_complete %>%
ggplot(aes(Undernourished_numeric, Obesity, color= nourishment_catagory))+geom_point()+geom_smooth(method = lm)
nourishment_complete %>%
ggplot(aes(Undernourished_numeric, Obesity))+geom_point()+geom_smooth(method = lm)
